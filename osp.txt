import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the data
df = pd.read_csv('your_dataset.csv')


# Preview the data
print(df.head())

# Shape of the data
print(df.shape)

# Data types
print(df.dtypes)

# Summary statistics
print(df.describe())


# Check for missing values
print(df.isnull().sum())

# Handle missing values
# Example: Drop rows with missing values
df = df.dropna()

# Example: Fill missing values with the mean (for numeric columns)
df['column_name'].fillna(df['column_name'].mean(), inplace=True)


# Remove duplicates
df = df.drop_duplicates()

# Handle outliers (example: using IQR method)
Q1 = df['column_name'].quantile(0.25)
Q3 = df['column_name'].quantile(0.75)
IQR = Q3 - Q1
df = df[~((df['column_name'] < (Q1 - 1.5 * IQR)) | (df['column_name'] > (Q3 + 1.5 * IQR)))]


# UNIVARIATE

# Univariate Analysis - Numeric Variable
plt.figure(figsize=(10, 6))
sns.histplot(df['numeric_column'], kde=True)
plt.title('Histogram of numeric_column')
plt.xlabel('numeric_column')
plt.ylabel('Frequency')
plt.show()

# Univariate Analysis - Box Plot for Numeric Variable
plt.figure(figsize=(10, 6))
sns.boxplot(x=df['numeric_column'])
plt.title('Box Plot of numeric_column')
plt.xlabel('numeric_column')
plt.show()

# Univariate Analysis - Categorical Variable
plt.figure(figsize=(10, 6))
sns.countplot(x='categorical_column', data=df)
plt.title('Count Plot of categorical_column')
plt.xlabel('categorical_column')
plt.ylabel('Count')
plt.show()


# BI-VARIATE

# Bivariate Analysis - Scatter Plot for Two Numeric Variables
plt.figure(figsize=(10, 6))
sns.scatterplot(x='numeric_column1', y='numeric_column2', data=df)
plt.title('Scatter Plot between numeric_column1 and numeric_column2')
plt.xlabel('numeric_column1')
plt.ylabel('numeric_column2')
plt.show()

# Bivariate Analysis - Box Plot for Categorical vs Numeric Variable
plt.figure(figsize=(10, 6))
sns.boxplot(x='categorical_column', y='numeric_column', data=df)
plt.title('Box Plot of numeric_column by categorical_column')
plt.xlabel('categorical_column')
plt.ylabel('numeric_column')
plt.show()

# Bivariate Analysis - Correlation Heatmap
plt.figure(figsize=(12, 8))
correlation_matrix = df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()


# MULTI-VARIATE

# Multivariate Analysis - Pair Plot
plt.figure(figsize=(12, 10))
sns.pairplot(df)
plt.title('Pair Plot')
plt.show()

# Multivariate Analysis - Heatmap of Correlations
plt.figure(figsize=(12, 8))
correlation_matrix = df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()


# Summary and Insights

- **Data Overview**: The dataset contains X rows and Y columns. Key features include...
- **Missing Values**: Columns with missing values and how they were handled.
- **Data Cleaning**: Outliers were identified and handled using the IQR method.
- **Univariate Analysis**: Key insights from the distribution of variables.
- **Bivariate Analysis**: Important correlations and relationships between variables.
- **Multivariate Analysis**: Overall patterns and interactions among multiple variables.

# Next Steps
- Further feature engineering based on insights.
- Selection of appropriate models for the problem.
- Hyperparameter tuning and model evaluation.

